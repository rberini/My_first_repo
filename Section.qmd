---
title: "R Object, Workflow and Functions"
format: pdf
editor: visual
---

# Vectors

Create a vector

```{r}
set.seed(42)
my_unif <- runif(30)
is.vector(my_unif)
```

Subset that object

```{r}
my_unif[1:10]
my_unif[c(1:3,15:17)]
```

Sort the vector

```{r}
sort(my_unif)
```

Create vector with strings

```{r}
char_vec <- c("abc", "def", "xyz", "ghi")
sort(char_vec)
```

# Data Frames

```{r}
data(trees)
trees
str(trees)
```

Subset a column

```{r}
trees$Height
```

Get attributes from dataframe

```{r}
attributes(trees)
names(trees)
colnames(trees)[2:3]
```

# Lists

Investigating data frame

```{r}
is.list(trees); is.data.frame(trees)
```

Can subset as a list

```{r}
trees[1]
trees[[2]]
```

Look at linear model fit

```{r}
fit <- lm(Volume ~ Height + Girth, data = trees)
str(fit, max.level = 1)
```

Helper functions

```{r}
fit$coefficients
coef(fit)
fit$residuals
residuals(fit)
fit$rank
```

# if/then/else

if divisible by 3 return fizz
if divisible by 5 return buzz
if divisible by 15 return fizzbuzz

```{r}
number <- 2
if(number %% 15 == 0) {
  print("fizzbuzz")
} else if (!(number %% 5)) {
  print("buzz")
} else if (!(number %% 3)) {
  print("fizz")
} else {
  print("whoops")
}
```

# Loops
Wrap fizz buzz code loop

```{r}
for(number in -1:41) {
  if(number %% 15 == 0) {
    print("fizzbuzz")
  } else if (!(number %% 5)) {
    print("buzz")
  } else if (!(number %% 3)) {
    print("fizz")
  } else {
    print("whoops")
  }
}
```

Normal approximation of binomial

```{r}
n <- 40
prob <- 0.3
dbinom(0:n, size = n, prob = prob)
plot(0:n, dbinom(0:n, size = n, prob = prob), type = "h")
norm_x <- seq(from = 0, to = n, length = 1000)
lines(norm_x, dnorm(norm_x, mean = n*prob, sd = sqrt(n*prob*(1-prob))))
```

Write a function to make plot for any $n$ and $p$

```{r}
plot_norm_approx <- function(n, prob) {
  plot(0:n, dbinom(0:n, size = n, prob = prob), type = "h")
  norm_x <- seq(from = 0, to = n, length = 1000)
  lines(norm_x, dnorm(norm_x, mean = n*prob, sd = sqrt(n*prob*(1-prob))))
}
```

Test it
```{r}
plot_norm_approx(30, 0.95)
```

```{r}
plot_norm_approx <- function(n = 30, prob = 0.5) {
  plot(0:n, dbinom(0:n, size = n, prob = prob), type = "h")
  norm_x <- seq(from = 0, to = n, length = 1000)
  lines(norm_x, dnorm(norm_x, mean = n*prob, sd = sqrt(n*prob*(1-prob))))
}
```

Test it

```{r}
plot_norm_approx(40, .7)
```

```{r}
plot_norm_approx(p = .3, n = 100)
```
